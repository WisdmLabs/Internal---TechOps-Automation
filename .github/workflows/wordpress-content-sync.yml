name: WordPress Content Sync
# This workflow downloads WordPress content to main branch and creates a PR to release branch
on:
  workflow_dispatch:
    inputs:
      site_url:
        description: 'WordPress site URL'
        required: true
        default: 'https://wordpress-1000690-5314661.cloudwaysapps.com'
      staging_url:
        description: 'Staging site URL'
        required: true
        default: 'https://staging-wordpress-1000690-5314661.cloudwaysapps.com'

permissions:
  contents: write
  pull-requests: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: main
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Create directory structure
        run: |
          mkdir -p wp-content/plugins
          mkdir -p wp-content/themes
          if [ ! -f .gitignore ]; then
            echo "# Ignore ZIP files and temp files" > .gitignore
            echo "*.zip" >> .gitignore
            echo "*.tmp" >> .gitignore
            echo "wp-content/**/*.zip" >> .gitignore
            git add .gitignore
          fi

      - name: Make scripts executable
        run: |
          chmod +x scripts/*.sh
          chmod +x scripts/*.js

      - name: Test API Authentication
        env:
          LIVE_SITE_AUTH_TOKEN: ${{ secrets.LIVE_SITE_AUTH_TOKEN }}
          STAGING_SITE_AUTH_TOKEN: ${{ secrets.STAGING_SITE_AUTH_TOKEN }}
          LIVE_SITE_URL: ${{ inputs.site_url }}
          STAGING_SITE_URL: ${{ inputs.staging_url }}
        run: |
          echo "Testing API endpoints and authentication..."
          
          # Function to test endpoint
          test_endpoint() {
            local url=$1
            local token=$2
            local description=$3
            local endpoint=$4
            
            echo "Testing $description endpoint: $url$endpoint"
            echo "Auth token format check..."
            if ! echo "$token" | base64 -d > /dev/null 2>&1; then
              echo "Error: $description auth token is not valid base64"
              exit 1
            fi
            
            response=$(curl -s -w "\n%{http_code}" -H "Authorization: Basic $token" "$url$endpoint")
            status_code=$(echo "$response" | tail -n1)
            body=$(echo "$response" | sed '$d')
            
            echo "Status code: $status_code"
            if [ "$status_code" != "200" ]; then
              echo "Error: $description endpoint returned status $status_code"
              exit 1
            fi
          }
          
          # Test live site endpoints
          test_endpoint "$LIVE_SITE_URL" "$LIVE_SITE_AUTH_TOKEN" "live site plugins" "/wp-json/techops/v1/plugins/list"
          test_endpoint "$LIVE_SITE_URL" "$LIVE_SITE_AUTH_TOKEN" "live site themes" "/wp-json/techops/v1/themes/list"
          
          # Test staging site endpoints
          test_endpoint "$STAGING_SITE_URL" "$STAGING_SITE_AUTH_TOKEN" "staging site plugins" "/wp-json/techops/v1/plugins/list"
          test_endpoint "$STAGING_SITE_URL" "$STAGING_SITE_AUTH_TOKEN" "staging site themes" "/wp-json/techops/v1/themes/list"

      - name: Download and process content
        if: success()
        env:
          LIVE_SITE_AUTH_TOKEN: ${{ secrets.LIVE_SITE_AUTH_TOKEN }}
          STAGING_SITE_AUTH_TOKEN: ${{ secrets.STAGING_SITE_AUTH_TOKEN }}
          LIVE_SITE_URL: ${{ inputs.site_url }}
          STAGING_SITE_URL: ${{ inputs.staging_url }}
        run: |
          echo "Starting content download with LIVE_SITE_URL: $LIVE_SITE_URL"
          bash ./scripts/download-content.sh

      - name: Cleanup temporary files
        if: always()
        run: |
          find wp-content -name "*.zip" -type f -delete
          find wp-content -name "*.tmp" -type f -delete

      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git fetch origin main
          git checkout main
          git pull origin main

      - name: Check for changes and commit to main
        id: check_changes
        run: |
          git add wp-content/
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            git commit -m "feat: Update WordPress content"
            git push origin main
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

  sync-activation:
    needs: sync
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: main
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Sync activation states
        env:
          LIVE_SITE_AUTH_TOKEN: ${{ secrets.LIVE_SITE_AUTH_TOKEN }}
          STAGING_SITE_AUTH_TOKEN: ${{ secrets.STAGING_SITE_AUTH_TOKEN }}
          LIVE_SITE_URL: ${{ inputs.site_url }}
          STAGING_SITE_URL: ${{ inputs.staging_url }}
        run: |
          node scripts/sync-activation.js

      - name: Commit sync report
        if: always()
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          if [[ -f wp-content/plugins/sync-report.json ]]; then
            git add wp-content/plugins/sync-report.json
            git commit -m "docs: Add activation sync report"
            git push origin main
          fi

      - name: Create Pull Request from main to release
        if: steps.check_changes.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: release
          head: main
          title: 'feat: Update WordPress content'
          body: |
            Automated PR to sync WordPress content from main to release:
            - Updated wp-content/plugins
            - Updated wp-content/themes
            - Synchronized plugin activation states
            
            Note: All temporary and ZIP files have been cleaned up.
            
            ## Changes Summary
            Branch being merged: `main` â†’ `release`
            
            ## Verification
            - [ ] Changes are present in main branch
            - [ ] No sensitive files included
            - [ ] Directory structure is correct
            - [ ] Plugin activation states are synchronized
          commit-message: 'feat: Update WordPress content'
          committer: GitHub <noreply@github.com>
          author: github-actions[bot] <github-actions[bot]@users.noreply.github.com>
          
      - name: Verify final state
        if: always()
        run: |
          echo "Final branch state:"
          git rev-parse --abbrev-ref HEAD
          
          echo "Recent commits in main:"
          git log -3 --oneline main
          
          echo "Recent commits in release:"
          git log -3 --oneline release
          
          echo "Branch difference:"
          git --no-pager diff main...release --stat 