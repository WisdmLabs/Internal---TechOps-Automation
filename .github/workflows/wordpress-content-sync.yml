name: WordPress Content Sync
on:
  workflow_dispatch:
    inputs:
      site_url:
        description: 'WordPress site URL'
        required: true
        default: 'https://wordpress-1000690-5314661.cloudwaysapps.com'

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: release
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Debug Environment
        run: |
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "Node.js version: $(node --version)"
          echo "NPM version: $(npm --version)"

      - name: Create directory structure
        run: |
          mkdir -p wp-content/plugins
          mkdir -p wp-content/themes
          # Create .gitignore if it doesn't exist
          if [ ! -f .gitignore ]; then
            echo "# Ignore ZIP files and temp files" > .gitignore
            echo "*.zip" >> .gitignore
            echo "*.tmp" >> .gitignore
            echo "wp-content/**/*.zip" >> .gitignore
            git add .gitignore
          fi
          echo "Directory structure created:"
          ls -R wp-content/

      - name: Make scripts executable
        run: |
          chmod +x scripts/*.sh
          chmod +x scripts/*.js
          echo "Script permissions:"
          ls -la scripts/

      - name: Test API Authentication
        env:
          WP_APP_USERNAME: ${{ secrets.WP_APP_USERNAME }}
          WP_APP_PASSWORD: ${{ secrets.WP_APP_PASSWORD }}
          WP_AUTH_TOKEN: ${{ secrets.WP_AUTH_TOKEN }}
          SITE_URL: ${{ inputs.site_url }}
        run: |
          echo "Testing API endpoints and authentication..."
          
          # Function to test endpoint
          test_endpoint() {
            local endpoint=$1
            local description=$2
            echo "Testing $description endpoint: $SITE_URL$endpoint"
            echo "Auth token format check..."
            if ! echo "$WP_AUTH_TOKEN" | base64 -d > /dev/null 2>&1; then
              echo "Error: WP_AUTH_TOKEN is not valid base64"
              exit 1
            fi
            
            # Test with curl
            echo "Making request to $description endpoint..."
            response=$(curl -s -w "\n%{http_code}" -H "Authorization: Basic $WP_AUTH_TOKEN" "$SITE_URL$endpoint")
            status_code=$(echo "$response" | tail -n1)
            body=$(echo "$response" | sed '$d')
            
            echo "Status code: $status_code"
            echo "Response headers:"
            curl -s -I -H "Authorization: Basic $WP_AUTH_TOKEN" "$SITE_URL$endpoint"
            echo "Response body:"
            echo "$body"
            
            if [ "$status_code" != "200" ]; then
              echo "Error: $description endpoint returned status $status_code"
              exit 1
            fi
            
            echo "$description endpoint test successful"
            echo "----------------------------------------"
          }
          
          # Test endpoints
          test_endpoint "/wp-json/techops/v1/plugins/list" "plugins"
          test_endpoint "/wp-json/techops/v1/themes/list" "themes"
          
          echo "API authentication tests completed successfully"

      - name: Download and process content
        if: success()
        env:
          WP_APP_USERNAME: ${{ secrets.WP_APP_USERNAME }}
          WP_APP_PASSWORD: ${{ secrets.WP_APP_PASSWORD }}
          WP_AUTH_TOKEN: ${{ secrets.WP_AUTH_TOKEN }}
          SITE_URL: ${{ inputs.site_url }}
        run: |
          echo "Starting content download with SITE_URL: $SITE_URL"
          bash ./scripts/download-content.sh

      - name: Cleanup temporary files
        if: always()
        run: |
          find wp-content -name "*.zip" -type f -delete
          find wp-content -name "*.tmp" -type f -delete
          echo "Cleanup completed. Current wp-content structure:"
          ls -R wp-content/

      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Check for changes
        id: check_changes
        run: |
          git add wp-content/
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "Changes detected in wp-content directory"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "No changes detected in wp-content directory"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request
        if: steps.check_changes.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: release
          title: 'feat: Update WordPress content'
          body: |
            Automated PR to sync WordPress content:
            - Updated wp-content/plugins
            - Updated wp-content/themes
            
            Note: All temporary and ZIP files have been cleaned up.
          branch: feat/wordpress-content-update
          commit-message: 'feat: Update WordPress content'
          delete-branch: true
          committer: GitHub <noreply@github.com>
          author: github-actions[bot] <github-actions[bot]@users.noreply.github.com> 